"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  OpenAIEmbeddingFunction: () => OpenAIEmbeddingFunction
});
module.exports = __toCommonJS(src_exports);
var import_chromadb = require("chromadb");
var import_openai = __toESM(require("openai"), 1);
var import_ai_embeddings_common = require("@chroma-core/ai-embeddings-common");
var NAME = "openai";
var OpenAIEmbeddingFunction = class _OpenAIEmbeddingFunction {
  constructor(args) {
    this.name = NAME;
    const {
      apiKeyEnvVar = "OPENAI_API_KEY",
      modelName,
      dimensions,
      organizationId
    } = args;
    const apiKey = args.apiKey || process.env[apiKeyEnvVar];
    if (!apiKey) {
      throw new Error(
        `OpenAI API key is required. Please provide it in the constructor or set the environment variable ${apiKeyEnvVar}.`
      );
    }
    this.modelName = modelName;
    this.organizationId = organizationId;
    this.apiKeyEnvVar = apiKeyEnvVar;
    this.dimensions = dimensions;
    this.client = new import_openai.default({ apiKey, organization: this.organizationId });
  }
  async generate(texts) {
    const response = await this.client.embeddings.create({
      input: texts,
      model: this.modelName,
      dimensions: this.dimensions
    });
    return response.data.map((e) => e.embedding);
  }
  defaultSpace() {
    return "cosine";
  }
  supportedSpaces() {
    return ["cosine", "l2", "ip"];
  }
  static buildFromConfig(config) {
    return new _OpenAIEmbeddingFunction({
      apiKeyEnvVar: config.api_key_env_var,
      modelName: config.model_name,
      organizationId: config.organization_id,
      dimensions: config.dimensions
    });
  }
  getConfig() {
    return {
      api_key_env_var: this.apiKeyEnvVar,
      model_name: this.modelName,
      organization_id: this.organizationId,
      dimensions: this.dimensions
    };
  }
  validateConfigUpdate(newConfig) {
    if (this.getConfig().model_name !== newConfig.model_name) {
      throw new import_chromadb.ChromaValueError("Model name cannot be updated");
    }
  }
  static validateConfig(config) {
    (0, import_ai_embeddings_common.validateConfigSchema)(config, NAME);
  }
};
(0, import_chromadb.registerEmbeddingFunction)(NAME, OpenAIEmbeddingFunction);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  OpenAIEmbeddingFunction
});
//# sourceMappingURL=openai.cjs.map