{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import {\n  ChromaValueError,\n  EmbeddingFunction,\n  EmbeddingFunctionSpace,\n  registerEmbeddingFunction,\n} from \"chromadb\";\nimport OpenAI from \"openai\";\nimport { validateConfigSchema } from \"@chroma-core/ai-embeddings-common\";\n\nconst NAME = \"openai\";\n\nexport interface OpenAIConfig {\n  api_key_env_var?: string;\n  model_name: string;\n  organization_id?: string;\n  dimensions?: number;\n}\n\nexport interface OpenAIArgs {\n  apiKeyEnvVar?: string;\n  modelName: string;\n  organizationId?: string;\n  dimensions?: number;\n  apiKey?: string;\n}\n\nexport class OpenAIEmbeddingFunction implements EmbeddingFunction {\n  public readonly name = NAME;\n  private readonly apiKeyEnvVar: string | undefined;\n  private readonly modelName: string;\n  private readonly dimensions: number | undefined;\n  private readonly organizationId: string | undefined;\n  private client: OpenAI;\n\n  constructor(args: OpenAIArgs) {\n    const {\n      apiKeyEnvVar = \"OPENAI_API_KEY\",\n      modelName,\n      dimensions,\n      organizationId,\n    } = args;\n\n    const apiKey = args.apiKey || process.env[apiKeyEnvVar];\n    if (!apiKey) {\n      throw new Error(\n        `OpenAI API key is required. Please provide it in the constructor or set the environment variable ${apiKeyEnvVar}.`,\n      );\n    }\n\n    this.modelName = modelName;\n    this.organizationId = organizationId;\n    this.apiKeyEnvVar = apiKeyEnvVar;\n    this.dimensions = dimensions;\n\n    this.client = new OpenAI({ apiKey, organization: this.organizationId });\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    const response = await this.client.embeddings.create({\n      input: texts,\n      model: this.modelName,\n      dimensions: this.dimensions,\n    });\n    return response.data.map((e) => e.embedding);\n  }\n\n  public defaultSpace(): EmbeddingFunctionSpace {\n    return \"cosine\";\n  }\n\n  public supportedSpaces(): EmbeddingFunctionSpace[] {\n    return [\"cosine\", \"l2\", \"ip\"];\n  }\n\n  public static buildFromConfig(config: OpenAIConfig): OpenAIEmbeddingFunction {\n    return new OpenAIEmbeddingFunction({\n      apiKeyEnvVar: config.api_key_env_var,\n      modelName: config.model_name,\n      organizationId: config.organization_id,\n      dimensions: config.dimensions,\n    });\n  }\n\n  public getConfig(): OpenAIConfig {\n    return {\n      api_key_env_var: this.apiKeyEnvVar,\n      model_name: this.modelName,\n      organization_id: this.organizationId,\n      dimensions: this.dimensions,\n    };\n  }\n\n  public validateConfigUpdate(newConfig: Record<string, any>): void {\n    if (this.getConfig().model_name !== newConfig.model_name) {\n      throw new ChromaValueError(\"Model name cannot be updated\");\n    }\n  }\n\n  public static validateConfig(config: OpenAIConfig): void {\n    validateConfigSchema(config, NAME);\n  }\n}\n\nregisterEmbeddingFunction(NAME, OpenAIEmbeddingFunction);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKO;AACP,oBAAmB;AACnB,kCAAqC;AAErC,IAAM,OAAO;AAiBN,IAAM,0BAAN,MAAM,yBAAqD;AAAA,EAQhE,YAAY,MAAkB;AAP9B,SAAgB,OAAO;AAQrB,UAAM;AAAA,MACJ,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AAEJ,UAAM,SAAS,KAAK,UAAU,QAAQ,IAAI,YAAY;AACtD,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,oGAAoG,YAAY;AAAA,MAClH;AAAA,IACF;AAEA,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,aAAa;AAElB,SAAK,SAAS,IAAI,cAAAA,QAAO,EAAE,QAAQ,cAAc,KAAK,eAAe,CAAC;AAAA,EACxE;AAAA,EAEA,MAAa,SAAS,OAAsC;AAC1D,UAAM,WAAW,MAAM,KAAK,OAAO,WAAW,OAAO;AAAA,MACnD,OAAO;AAAA,MACP,OAAO,KAAK;AAAA,MACZ,YAAY,KAAK;AAAA,IACnB,CAAC;AACD,WAAO,SAAS,KAAK,IAAI,CAAC,MAAM,EAAE,SAAS;AAAA,EAC7C;AAAA,EAEO,eAAuC;AAC5C,WAAO;AAAA,EACT;AAAA,EAEO,kBAA4C;AACjD,WAAO,CAAC,UAAU,MAAM,IAAI;AAAA,EAC9B;AAAA,EAEA,OAAc,gBAAgB,QAA+C;AAC3E,WAAO,IAAI,yBAAwB;AAAA,MACjC,cAAc,OAAO;AAAA,MACrB,WAAW,OAAO;AAAA,MAClB,gBAAgB,OAAO;AAAA,MACvB,YAAY,OAAO;AAAA,IACrB,CAAC;AAAA,EACH;AAAA,EAEO,YAA0B;AAC/B,WAAO;AAAA,MACL,iBAAiB,KAAK;AAAA,MACtB,YAAY,KAAK;AAAA,MACjB,iBAAiB,KAAK;AAAA,MACtB,YAAY,KAAK;AAAA,IACnB;AAAA,EACF;AAAA,EAEO,qBAAqB,WAAsC;AAChE,QAAI,KAAK,UAAU,EAAE,eAAe,UAAU,YAAY;AACxD,YAAM,IAAI,iCAAiB,8BAA8B;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,OAAc,eAAe,QAA4B;AACvD,0DAAqB,QAAQ,IAAI;AAAA,EACnC;AACF;AAAA,IAEA,2CAA0B,MAAM,uBAAuB;","names":["OpenAI"]}