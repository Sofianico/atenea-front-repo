// src/index.ts
import {
  ChromaValueError,
  registerEmbeddingFunction
} from "chromadb";
import OpenAI from "openai";
import { validateConfigSchema } from "@chroma-core/ai-embeddings-common";
var NAME = "openai";
var OpenAIEmbeddingFunction = class _OpenAIEmbeddingFunction {
  constructor(args) {
    this.name = NAME;
    const {
      apiKeyEnvVar = "OPENAI_API_KEY",
      modelName,
      dimensions,
      organizationId
    } = args;
    const apiKey = args.apiKey || process.env[apiKeyEnvVar];
    if (!apiKey) {
      throw new Error(
        `OpenAI API key is required. Please provide it in the constructor or set the environment variable ${apiKeyEnvVar}.`
      );
    }
    this.modelName = modelName;
    this.organizationId = organizationId;
    this.apiKeyEnvVar = apiKeyEnvVar;
    this.dimensions = dimensions;
    this.client = new OpenAI({ apiKey, organization: this.organizationId });
  }
  async generate(texts) {
    const response = await this.client.embeddings.create({
      input: texts,
      model: this.modelName,
      dimensions: this.dimensions
    });
    return response.data.map((e) => e.embedding);
  }
  defaultSpace() {
    return "cosine";
  }
  supportedSpaces() {
    return ["cosine", "l2", "ip"];
  }
  static buildFromConfig(config) {
    return new _OpenAIEmbeddingFunction({
      apiKeyEnvVar: config.api_key_env_var,
      modelName: config.model_name,
      organizationId: config.organization_id,
      dimensions: config.dimensions
    });
  }
  getConfig() {
    return {
      api_key_env_var: this.apiKeyEnvVar,
      model_name: this.modelName,
      organization_id: this.organizationId,
      dimensions: this.dimensions
    };
  }
  validateConfigUpdate(newConfig) {
    if (this.getConfig().model_name !== newConfig.model_name) {
      throw new ChromaValueError("Model name cannot be updated");
    }
  }
  static validateConfig(config) {
    validateConfigSchema(config, NAME);
  }
};
registerEmbeddingFunction(NAME, OpenAIEmbeddingFunction);
export {
  OpenAIEmbeddingFunction
};
//# sourceMappingURL=openai.mjs.map