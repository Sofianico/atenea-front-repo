{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import {\n  isBrowser,\n  validateConfigSchema,\n} from \"@chroma-core/ai-embeddings-common\";\nimport {\n  ChromaValueError,\n  EmbeddingFunction,\n  EmbeddingFunctionSpace,\n  registerEmbeddingFunction,\n} from \"chromadb\";\nimport type { Ollama as OllamaNode } from \"ollama\";\nimport type { Ollama as OllamaBrowser } from \"ollama/browser\";\n\nconst NAME = \"ollama\";\n\nexport interface OllamaConfig {\n  url: string;\n  model_name: string;\n}\n\nexport class OllamaEmbeddingFunction implements EmbeddingFunction {\n  public readonly name = NAME;\n  private readonly url: string;\n  private readonly model: string;\n  private client: OllamaNode | OllamaBrowser | undefined;\n\n  constructor(args: Partial<{ url?: string; model: string }> = {}) {\n    const {\n      url = \"http://localhost:11434\",\n      model = \"chroma/all-minilm-l6-v2-f32\",\n    } = args;\n    this.url = url;\n    this.model = model;\n  }\n\n  private async import() {\n    if (isBrowser()) {\n      const { Ollama } = await import(\"ollama/browser\");\n      this.client = new Ollama({ host: this.url });\n    } else {\n      const { Ollama } = await import(\"ollama\");\n      this.client = new Ollama({ host: this.url });\n    }\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.import();\n    if (!this.client) {\n      throw new Error(\"Failed to instantiate Ollama client\");\n    }\n    const response = await this.client.embed({\n      model: this.model,\n      input: texts,\n    });\n    return response.embeddings;\n  }\n\n  public defaultSpace(): EmbeddingFunctionSpace {\n    return \"cosine\";\n  }\n\n  public supportedSpaces(): EmbeddingFunctionSpace[] {\n    return [\"cosine\", \"l2\", \"ip\"];\n  }\n\n  public static buildFromConfig(config: OllamaConfig): OllamaEmbeddingFunction {\n    return new OllamaEmbeddingFunction({\n      model: config.model_name,\n      url: config.url,\n    });\n  }\n\n  public getConfig(): OllamaConfig {\n    return {\n      model_name: this.model,\n      url: this.url,\n    };\n  }\n\n  public validateConfigUpdate(newConfig: Record<string, any>): void {\n    if (this.getConfig().model_name !== newConfig.model_name) {\n      throw new ChromaValueError(\"Model name cannot be updated\");\n    }\n  }\n\n  public static validateConfig(config: OllamaConfig): void {\n    validateConfigSchema(config, NAME);\n  }\n}\n\nregisterEmbeddingFunction(NAME, OllamaEmbeddingFunction);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAGO;AACP,sBAKO;AAIP,IAAM,OAAO;AAON,IAAM,0BAAN,MAAM,yBAAqD;AAAA,EAMhE,YAAY,OAAiD,CAAC,GAAG;AALjE,SAAgB,OAAO;AAMrB,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,IAAI;AACJ,SAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,MAAc,SAAS;AACrB,YAAI,uCAAU,GAAG;AACf,YAAM,EAAE,OAAO,IAAI,MAAM,OAAO,gBAAgB;AAChD,WAAK,SAAS,IAAI,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;AAAA,IAC7C,OAAO;AACL,YAAM,EAAE,OAAO,IAAI,MAAM,OAAO,QAAQ;AACxC,WAAK,SAAS,IAAI,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC;AAAA,IAC7C;AAAA,EACF;AAAA,EAEA,MAAa,SAAS,OAAsC;AAC1D,UAAM,KAAK,OAAO;AAClB,QAAI,CAAC,KAAK,QAAQ;AAChB,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AACA,UAAM,WAAW,MAAM,KAAK,OAAO,MAAM;AAAA,MACvC,OAAO,KAAK;AAAA,MACZ,OAAO;AAAA,IACT,CAAC;AACD,WAAO,SAAS;AAAA,EAClB;AAAA,EAEO,eAAuC;AAC5C,WAAO;AAAA,EACT;AAAA,EAEO,kBAA4C;AACjD,WAAO,CAAC,UAAU,MAAM,IAAI;AAAA,EAC9B;AAAA,EAEA,OAAc,gBAAgB,QAA+C;AAC3E,WAAO,IAAI,yBAAwB;AAAA,MACjC,OAAO,OAAO;AAAA,MACd,KAAK,OAAO;AAAA,IACd,CAAC;AAAA,EACH;AAAA,EAEO,YAA0B;AAC/B,WAAO;AAAA,MACL,YAAY,KAAK;AAAA,MACjB,KAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEO,qBAAqB,WAAsC;AAChE,QAAI,KAAK,UAAU,EAAE,eAAe,UAAU,YAAY;AACxD,YAAM,IAAI,iCAAiB,8BAA8B;AAAA,IAC3D;AAAA,EACF;AAAA,EAEA,OAAc,eAAe,QAA4B;AACvD,0DAAqB,QAAQ,IAAI;AAAA,EACnC;AACF;AAAA,IAEA,2CAA0B,MAAM,uBAAuB;","names":[]}